from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm import state
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext

from config.config import API_TOKEN
from database.database import create_profile, edit_profile, get_profile, get_all_events, delete_event_by_id, \
    get_event_by_id
from filters.filters import IsAdminFilter, IsAdminCallbackFilter
from keyboards.simple_keyboards import create_kb, cancel_kb, main_menu_kb, help_menu_keyboard
from lexicon.lexicon import LEXICON_RU
from aiogram.filters import StateFilter

router = Router()
bot = Bot(API_TOKEN)

class ProfileStatesGroup(StatesGroup):
    photo = State()
    name = State()
    age = State()
    description = State()




@router.message(Command(commands = "start"))
async def process_start_command(message: Message):
    await message.answer(text = LEXICON_RU["/start"],
                         parse_mode='html',
                         reply_markup = create_kb)


@router.message(Command(commands="main_menu"))
async def process_get_main_menu_command(message: Message):
    await message.answer(text = LEXICON_RU["main_menu"], reply_markup=main_menu_kb)



@router.message(lambda message: message.text and message.text.lower() == "–ø–æ–º–æ—â—å")
async def process_help_command(message: Message):
    await message.answer(
        text=LEXICON_RU["/help"],
        parse_mode='html',
        reply_markup=help_menu_keyboard
    )


@router.message(lambda message: message.text and message.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def process_create_command(message: Message, state: FSMContext):
    await message.reply(text= LEXICON_RU["/create"],
                        reply_markup= cancel_kb)
    await create_profile(user_id=message.from_user.id, username = message.from_user.username)
    await state.set_state(ProfileStatesGroup.photo)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
    # current_state = await state.get_state()
    # print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")  # –ü–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å


@router.message(lambda message: message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã")
async def process_cancel(message: Message, state: FSMContext):
     if state is None:
         return
     await state.clear()
     await message.reply(text = LEXICON_RU["/cancel"],
                         reply_markup=create_kb)


@router.message(lambda message: not message.photo, StateFilter(ProfileStatesGroup.photo))
async def process_check_photo(message: Message):
    await message.reply(text=LEXICON_RU["/not_photo"])



@router.message(F.content_type == 'photo', StateFilter(ProfileStatesGroup.photo))
async def process_get_photo(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(photo=message.photo[0].file_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:')
    await state.set_state(ProfileStatesGroup.name)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
    # current_state = await state.get_state()
    # print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")  # –ü–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å


@router.message(StateFilter(ProfileStatesGroup.name))
async def process_get_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(name=message.text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await state.set_state(ProfileStatesGroup.age)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
    # current_state = await state.get_state()
    # print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")  # –ü–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å

@router.message(StateFilter(ProfileStatesGroup.age))
async def process_get_age(message: Message, state: FSMContext):
    age = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    if age.isdigit() and 16 < int(age) < 99:
        await state.update_data(age=age)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:')
        await state.set_state(ProfileStatesGroup.description)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 17 –¥–æ 98 –ª–µ—Ç, –∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ')

@router.message(StateFilter(ProfileStatesGroup.description))
async def process_get_description(message: Message, state: FSMContext):
    await state.update_data(description = message.text)
    data = await state.get_data()
    await bot.send_photo(chat_id=message.from_user.id,
                         photo=data.get('photo'),
                         caption=f"{data.get('name')}, {data.get('age')}\n{data.get('description')}",
                         reply_markup=main_menu_kb
                         )
    await edit_profile(state, user_id=message.from_user.id)
    await state.clear()


@router.message(lambda message: message.text and message.text.lower() == "–º–æ—è –∞–Ω–∫–µ—Ç–∞")
async def process_get_blank(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await get_profile(message.from_user.id)

    if profile:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è
        name, age, photo, description = profile
        if name and age and photo and description:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_photo(chat_id=message.from_user.id,
                                 photo=photo,
                                 caption=f"{name}, {age}\n{description}",
                                 reply_markup=main_menu_kb)
            await bot.send_message(chat_id = message.from_user.id,
                                   text=LEXICON_RU['change_data'])
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ—Å–∏–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º —Å–æ–∑–¥–∞—Ç—å
        await message.answer(text = "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É.", reply_markup=create_kb)






@router.message(lambda message: message.text and message.text.lower() == "—Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
async def process_get_events(message: Message):
    events = await get_all_events()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (id, name)

    if events:
        buttons = [
            [InlineKeyboardButton(text=event_name, callback_data=f"event_{event_id}")]
            for event_id, event_name in events
        ]

        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if await IsAdminFilter()(message):
            buttons.append([InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="delete_event")])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb)
    else:
        await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")




@router.callback_query(lambda c: c.data.startswith('event_'))
async def show_event_card(callback: CallbackQuery):
    event_id = callback.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    event = await get_event_by_id(event_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

    if event:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        card_text = (
            f"<b>{event['event_name']}</b>\n\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {event['date_start']}\n"
            f"üìÖ –ö–æ–Ω–µ—Ü: {event['date_end']}\n\n"
            f"{event['event_description']}"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏: —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons = [
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", url=event['event_url'])],  # –ö–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞
            [InlineKeyboardButton(text="<- –ù–∞–∑–∞–¥", callback_data="back_to_events")]  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.answer_photo(
            photo=event['event_photo'],
            caption=card_text,
            parse_mode='HTML',
            reply_markup=kb
        )
    else:
        await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await callback.answer()


@router.callback_query(lambda c: c.data == "back_to_events")
async def back_to_events(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    events = await get_all_events()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (id, name)

    if events:
        buttons = [
            [InlineKeyboardButton(text=event_name, callback_data=f"event_{event_id}")]
            for event_id, event_name in events
        ]


        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.delete()
        await callback.message.answer("–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb)
    else:
        await callback.message.delete()
        await callback.message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")




# @router.callback_query(lambda c: c.data.startswith('event_'))
# async def show_event_card(callback: CallbackQuery):
#     event_id = callback.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ callback_data
#     event = await get_event_by_id(event_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ ID
#
#     if event:
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
#         card_text = (
#             f"<b>{event['event_name']}</b>\n\n"
#             f"üìÖ –ù–∞—á–∞–ª–æ: {event['date_start']}\n"
#             f"üìÖ –ö–æ–Ω–µ—Ü: {event['date_end']}\n\n"
#             f"{event['event_description']}\n\n"
#             f"<a href='{event['event_url']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é</a>"
#         )
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
#         await callback.message.answer_photo(
#             photo=event['event_photo'],
#             caption=card_text,
#             parse_mode='HTML'
#         )
#     else:
#         await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#
#     # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª "–ß–∞—Å—ã"
#     await callback.answer()
